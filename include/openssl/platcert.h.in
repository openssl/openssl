/*
 * {- join("\n * ", @autowarntext) -}
 *
 * Copyright 2025 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License"). You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

{-
use OpenSSL::stackhash qw(generate_stack_macros);
-}

#ifndef OPENSSL_PLATCERT_H
# define OPENSSL_PLATCERT_H
# pragma once
# include <openssl/x509v3.h>
# include <openssl/x509_acert.h>

# ifdef __cplusplus
extern "C" {
# endif

typedef struct URI_REFERENCE_st {
    ASN1_IA5STRING *uniformResourceIdentifier;
    X509_ALGOR *hashAlgorithm;
    ASN1_BIT_STRING *hashValue;
} URI_REFERENCE;

typedef struct COMMON_CRITERIA_MEASURES_st {
    ASN1_IA5STRING *version;
    ASN1_ENUMERATED *assurancelevel;
    ASN1_ENUMERATED *evaluationStatus;
    ASN1_BOOLEAN plus;
    ASN1_ENUMERATED *strengthOfFunction;
    ASN1_OBJECT *profileOid;
    URI_REFERENCE *profileUri;
    ASN1_OBJECT *targetOid;
    URI_REFERENCE *targetUri;
} COMMON_CRITERIA_MEASURES;
DECLARE_ASN1_FUNCTIONS(COMMON_CRITERIA_MEASURES)

typedef struct FIPS_LEVEL_st {
    ASN1_IA5STRING *version;
    ASN1_ENUMERATED *level;
    ASN1_BOOLEAN plus;
} FIPS_LEVEL;
DECLARE_ASN1_FUNCTIONS(FIPS_LEVEL)

typedef struct TBB_SECURITY_ASSERTIONS_st {
    ASN1_INTEGER *version;
    COMMON_CRITERIA_MEASURES *ccInfo;
    FIPS_LEVEL *fipsLevel;
    ASN1_ENUMERATED *rtmType;
    ASN1_BOOLEAN iso9000Certified;
    ASN1_IA5STRING *iso9000Uri;
} TBB_SECURITY_ASSERTIONS;
DECLARE_ASN1_FUNCTIONS(TBB_SECURITY_ASSERTIONS)

typedef struct MANUFACTURER_ID_st {
    ASN1_OBJECT *manufacturerIdentifier;
} MANUFACTURER_ID;

DECLARE_ASN1_FUNCTIONS(MANUFACTURER_ID)

typedef struct TCG_SPEC_VERSION_st {
    ASN1_INTEGER *majorVersion;
    ASN1_INTEGER *minorVersion;
    ASN1_INTEGER *revision;
} TCG_SPEC_VERSION;

DECLARE_ASN1_FUNCTIONS(TCG_SPEC_VERSION)

typedef struct TCG_PLATFORM_SPEC_st {
    TCG_SPEC_VERSION *version;
    ASN1_OCTET_STRING *platformClass;
} TCG_PLATFORM_SPEC;

DECLARE_ASN1_FUNCTIONS(TCG_PLATFORM_SPEC)

typedef struct TCG_CRED_TYPE_st {
    ASN1_OBJECT *certificateType;
} TCG_CRED_TYPE;

DECLARE_ASN1_FUNCTIONS(TCG_CRED_TYPE)

typedef struct COMPONENT_CLASS_st {
    ASN1_OBJECT *componentClassRegistry;
    ASN1_OCTET_STRING *componentClassValue;
} COMPONENT_CLASS;

DECLARE_ASN1_FUNCTIONS(COMPONENT_CLASS)

typedef struct COMPONENT_ADDRESS_st {
    ASN1_OBJECT *addressType;
    ASN1_UTF8STRING *addressValue;
} COMPONENT_ADDRESS;

typedef struct PLATFORM_PROPERTY_st {
    ASN1_UTF8STRING *propertyName;
    ASN1_UTF8STRING *propertyValue;
    ASN1_ENUMERATED *status;
} PLATFORM_PROPERTY;

typedef struct ATTRIBUTE_CERTIFICATE_IDENTIFIER_st {
    X509_ALGOR *hashAlgorithm;
    ASN1_OCTET_STRING *hashOverSignatureValue;
} ATTRIBUTE_CERTIFICATE_IDENTIFIER;

DECLARE_ASN1_ITEM(ATTRIBUTE_CERTIFICATE_IDENTIFIER)

typedef struct CERTIFICATE_IDENTIFIER_st {
    ATTRIBUTE_CERTIFICATE_IDENTIFIER *attributeCertIdentifier;
    OSSL_ISSUER_SERIAL *genericCertIdentifier;
} CERTIFICATE_IDENTIFIER;

DECLARE_ASN1_ITEM(CERTIFICATE_IDENTIFIER)

typedef struct COMPONENT_IDENTIFIER_st {
    COMPONENT_CLASS *componentClass;
    ASN1_UTF8STRING *componentManufacturer;
    ASN1_UTF8STRING *componentModel;
    ASN1_UTF8STRING *componentSerial;
    ASN1_UTF8STRING *componentRevision;
    ASN1_OBJECT *componentManufacturerId;
    ASN1_BOOLEAN fieldReplaceable;
    STACK_OF(COMPONENT_ADDRESS) *componentAddresses;
    CERTIFICATE_IDENTIFIER *componentPlatformCert;
    URI_REFERENCE *componentPlatformCertUri;
    ASN1_ENUMERATED *status;
} COMPONENT_IDENTIFIER;

typedef struct PLATFORM_CONFIG_st {
    STACK_OF(COMPONENT_IDENTIFIER) *componentIdentifiers;
    URI_REFERENCE *componentIdentifiersUri;
    STACK_OF(PLATFORM_PROPERTY) *platformProperties;
    URI_REFERENCE *platformPropertiesUri;
} PLATFORM_CONFIG;
DECLARE_ASN1_FUNCTIONS(PLATFORM_CONFIG)

# define MEASUREMENT_ROOT_TYPE_STATIC        0
# define MEASUREMENT_ROOT_TYPE_DYNAMIC       1
# define MEASUREMENT_ROOT_TYPE_NONHOST       2
# define MEASUREMENT_ROOT_TYPE_HYBRID        3
# define MEASUREMENT_ROOT_TYPE_PHYSICAL      4
# define MEASUREMENT_ROOT_TYPE_VIRTUAL       5
# define EVALUATION_ASSURANCE_LEVEL_1        1
# define EVALUATION_ASSURANCE_LEVEL_2        2
# define EVALUATION_ASSURANCE_LEVEL_3        3
# define EVALUATION_ASSURANCE_LEVEL_4        4
# define EVALUATION_ASSURANCE_LEVEL_5        5
# define EVALUATION_ASSURANCE_LEVEL_6        6
# define EVALUATION_ASSURANCE_LEVEL_7        7
# define EVALUATION_STATUS_DESIGNED_TO_MEET  0
# define EVALUATION_STATUS_EVAL_IN_PROGRESS  1
# define EVALUATION_STATUS_EVAL_COMPLETED    2
# define STRENGTH_OF_FUNCTION_BASIC          0
# define STRENGTH_OF_FUNCTION_MEDIUM         1
# define STRENGTH_OF_FUNCTION_HIGH           2
# define SECURITY_LEVEL_1                    1
# define SECURITY_LEVEL_2                    2
# define SECURITY_LEVEL_3                    3
# define SECURITY_LEVEL_4                    4
# define ATTRIBUTE_STATUS_ADDED              0
# define ATTRIBUTE_STATUS_MODIFIED           1
# define ATTRIBUTE_STATUS_REMOVED            2

DECLARE_ASN1_FUNCTIONS(URI_REFERENCE)
{-
    generate_stack_macros("URI_REFERENCE");
-}

DECLARE_ASN1_FUNCTIONS(COMPONENT_ADDRESS)
{-
    generate_stack_macros("COMPONENT_ADDRESS");
-}

DECLARE_ASN1_FUNCTIONS(PLATFORM_PROPERTY)
{-
    generate_stack_macros("PLATFORM_PROPERTY");
-}

DECLARE_ASN1_FUNCTIONS(COMPONENT_IDENTIFIER)
{-
    generate_stack_macros("COMPONENT_IDENTIFIER");
-}

typedef struct PCV2_TRAIT_st {
    ASN1_OBJECT *traitId;
    ASN1_OBJECT *traitCategory;
    ASN1_OBJECT *traitRegistry;
    ASN1_UTF8STRING *description;
    ASN1_IA5STRING *descriptionURI;
    ASN1_OCTET_STRING *traitValue;
} PCV2_TRAIT;

DECLARE_ASN1_FUNCTIONS(PCV2_TRAIT)
{-
    generate_stack_macros("PCV2_TRAIT");
-}

typedef struct HASHED_CERTIFICATE_IDENTIFIER_st {
    X509_ALGOR *hashValue;
    ASN1_OCTET_STRING *hashOverSignatureValue;
} HASHED_CERTIFICATE_IDENTIFIER;

DECLARE_ASN1_FUNCTIONS(HASHED_CERTIFICATE_IDENTIFIER)

typedef struct COMMON_CRITERIA_EVALUATION_st {
    COMMON_CRITERIA_MEASURES *cCMeasures;
    ASN1_UTF8STRING *cCCertificateNumber;
    ASN1_UTF8STRING *cCCertificateAuthority;
    ASN1_UTF8STRING *evaluationScheme;
    ASN1_GENERALIZEDTIME *cCCertificateIssuanceDate;
    ASN1_GENERALIZEDTIME *cCCertificateExpiryDate;
} COMMON_CRITERIA_EVALUATION;

typedef struct ISO9000_CERTIFICATION_st {
    ASN1_BOOLEAN iso9000Certified;
    ASN1_IA5STRING *iso9000Uri;
} ISO9000_CERTIFICATION;

# define PLATFORM_FW_CAP_FW_SETUP_AUTH_LOCAL         0
# define PLATFORM_FW_CAP_FW_SETUP_AUTH_REMOTE        1
# define PLATFORM_FW_CAP_SMM_PROTECTION              2
# define PLATFORM_FW_CAP_FW_KERNAL_DMA_PROTECTION    3

# define PLATFORM_FW_SIG_VERIF_HARDWARE_SRTM         0
# define PLATFORM_FW_SIG_VERIF_SECURE_BOOT           1

# define PLATFORM_FW_UPDATE_COMPLIANCE_SP800_147     0
# define PLATFORM_FW_UPDATE_COMPLIANCE_SP800_147B    1
# define PLATFORM_FW_UPDATE_COMPLIANCE_SP800_193     2

# define PLATFORM_HW_CAP_IOMMU_SUPPORT               0
# define PLATFORM_HW_CAP_TRUSTED_EXEC_ENV            1
# define PLATFORM_HW_CAP_PHYSICAL_TAMPER_PROT        2
# define PLATFORM_HW_CAP_PHYSICAL_TAMPER_DET         3
# define PLATFORM_HW_CAP_FIRMWARE_FLASH_WP           4
# define PLATFORM_HW_CAP_EXTERNAL_DMA_SUPPORT        5

# define RTM_TYPE_STATIC                             0
# define RTM_TYPE_DYNAMIC                            1
# define RTM_TYPE_NON_HOST                           2
# define RTM_TYPE_VIRTUAL                            3
# define RTM_TYPE_HARDWARE_STATIC                    4
# define RTM_TYPE_BMC                                5

typedef STACK_OF(PCV2_TRAIT) COMPONENT_IDENTIFIER_V2;
typedef STACK_OF(COMPONENT_IDENTIFIER_V2) PLATFORM_COMPONENTS;

DECLARE_ASN1_FUNCTIONS(PLATFORM_COMPONENTS)
DECLARE_ASN1_FUNCTIONS(COMPONENT_IDENTIFIER_V2)

typedef struct PLATFORM_CONFIG_V3_st {
    PLATFORM_COMPONENTS *platformComponents;
    STACK_OF(PLATFORM_PROPERTY) *platformProperties;
} PLATFORM_CONFIG_V3;

DECLARE_ASN1_FUNCTIONS(PLATFORM_CONFIG_V3)

typedef struct PCV2_CERTIFICATE_IDENTIFIER_st {
    HASHED_CERTIFICATE_IDENTIFIER *hashedCertIdentifier;
    OSSL_ISSUER_SERIAL *genericCertIdentifier;
} PCV2_CERTIFICATE_IDENTIFIER;

DECLARE_ASN1_FUNCTIONS(PCV2_CERTIFICATE_IDENTIFIER)
DECLARE_ASN1_FUNCTIONS(COMMON_CRITERIA_EVALUATION)
DECLARE_ASN1_FUNCTIONS(ISO9000_CERTIFICATION)

# define PLATFORM_FW_CAP_FW_SETUP_AUTH_LOCAL         0
# define PLATFORM_FW_CAP_FW_SETUP_AUTH_REMOTE        1
# define PLATFORM_FW_CAP_SMM_PROTECTION              2
# define PLATFORM_FW_CAP_FW_KERNAL_DMA_PROTECTION    3

# define PLATFORM_FW_SIG_VERIF_HARDWARE_SRTM         0
# define PLATFORM_FW_SIG_VERIF_SECURE_BOOT           1

# define PLATFORM_FW_UPDATE_COMPLIANCE_SP800_147     0
# define PLATFORM_FW_UPDATE_COMPLIANCE_SP800_147B    1
# define PLATFORM_FW_UPDATE_COMPLIANCE_SP800_193     2

# define PLATFORM_HW_CAP_IOMMU_SUPPORT               0
# define PLATFORM_HW_CAP_TRUSTED_EXEC_ENV            1
# define PLATFORM_HW_CAP_PHYSICAL_TAMPER_PROT        2
# define PLATFORM_HW_CAP_PHYSICAL_TAMPER_DET         3
# define PLATFORM_HW_CAP_FIRMWARE_FLASH_WP           4
# define PLATFORM_HW_CAP_EXTERNAL_DMA_SUPPORT        5

# define RTM_TYPE_STATIC                             0
# define RTM_TYPE_DYNAMIC                            1
# define RTM_TYPE_NON_HOST                           2
# define RTM_TYPE_VIRTUAL                            3
# define RTM_TYPE_HARDWARE_STATIC                    4
# define RTM_TYPE_BMC                                5

# ifdef  __cplusplus
}
# endif
#endif
