/*
 * {- join("\n * ", @autowarntext) -}
 *
 * Copyright 2025 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License"). You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

{-
use OpenSSL::stackhash qw(generate_stack_macros);
-}

#ifndef OPENSSL_PLATCERT_H
# define OPENSSL_PLATCERT_H
# pragma once
# include <openssl/x509v3.h>
# include <openssl/x509_acert.h>

# ifdef __cplusplus
extern "C" {
# endif

typedef struct OSSL_URI_REFERENCE_st {
    ASN1_IA5STRING *uniformResourceIdentifier;
    X509_ALGOR *hashAlgorithm;
    ASN1_BIT_STRING *hashValue;
} OSSL_URI_REFERENCE;

typedef struct OSSL_COMMON_CRITERIA_MEASURES_st {
    ASN1_IA5STRING *version;
    ASN1_ENUMERATED *assurancelevel;
    ASN1_ENUMERATED *evaluationStatus;
    ASN1_BOOLEAN plus;
    ASN1_ENUMERATED *strengthOfFunction;
    ASN1_OBJECT *profileOid;
    OSSL_URI_REFERENCE *profileUri;
    ASN1_OBJECT *targetOid;
    OSSL_URI_REFERENCE *targetUri;
} OSSL_COMMON_CRITERIA_MEASURES;

DECLARE_ASN1_FUNCTIONS(OSSL_COMMON_CRITERIA_MEASURES)

typedef struct OSSL_FIPS_LEVEL_st {
    ASN1_IA5STRING *version;
    ASN1_ENUMERATED *level;
    ASN1_BOOLEAN plus;
} OSSL_FIPS_LEVEL;

DECLARE_ASN1_FUNCTIONS(OSSL_FIPS_LEVEL)

typedef struct OSSL_TBB_SECURITY_ASSERTIONS_st {
    ASN1_INTEGER *version;
    OSSL_COMMON_CRITERIA_MEASURES *ccInfo;
    OSSL_FIPS_LEVEL *fipsLevel;
    ASN1_ENUMERATED *rtmType;
    ASN1_BOOLEAN iso9000Certified;
    ASN1_IA5STRING *iso9000Uri;
} OSSL_TBB_SECURITY_ASSERTIONS;

DECLARE_ASN1_FUNCTIONS(OSSL_TBB_SECURITY_ASSERTIONS)

typedef struct OSSL_MANUFACTURER_ID_st {
    ASN1_OBJECT *manufacturerIdentifier;
} OSSL_MANUFACTURER_ID;

DECLARE_ASN1_FUNCTIONS(OSSL_MANUFACTURER_ID)

typedef struct OSSL_TCG_SPEC_VERSION_st {
    ASN1_INTEGER *majorVersion;
    ASN1_INTEGER *minorVersion;
    ASN1_INTEGER *revision;
} OSSL_TCG_SPEC_VERSION;

DECLARE_ASN1_FUNCTIONS(OSSL_TCG_SPEC_VERSION)

typedef struct OSSL_TCG_PLATFORM_SPEC_st {
    OSSL_TCG_SPEC_VERSION *version;
    ASN1_OCTET_STRING *platformClass;
} OSSL_TCG_PLATFORM_SPEC;

DECLARE_ASN1_FUNCTIONS(OSSL_TCG_PLATFORM_SPEC)

typedef struct OSSL_TCG_CRED_TYPE_st {
    ASN1_OBJECT *certificateType;
} OSSL_TCG_CRED_TYPE;

DECLARE_ASN1_FUNCTIONS(OSSL_TCG_CRED_TYPE)

typedef struct OSSL_COMPONENT_CLASS_st {
    ASN1_OBJECT *componentClassRegistry;
    ASN1_OCTET_STRING *componentClassValue;
} OSSL_COMPONENT_CLASS;

DECLARE_ASN1_FUNCTIONS(OSSL_COMPONENT_CLASS)

typedef struct OSSL_COMPONENT_ADDRESS_st {
    ASN1_OBJECT *addressType;
    ASN1_UTF8STRING *addressValue;
} OSSL_COMPONENT_ADDRESS;

typedef struct OSSL_PLATFORM_PROPERTY_st {
    ASN1_UTF8STRING *propertyName;
    ASN1_UTF8STRING *propertyValue;
    ASN1_ENUMERATED *status;
} OSSL_PLATFORM_PROPERTY;

typedef struct OSSL_ATTRIBUTE_CERTIFICATE_IDENTIFIER_st {
    X509_ALGOR *hashAlgorithm;
    ASN1_OCTET_STRING *hashOverSignatureValue;
} OSSL_ATTRIBUTE_CERTIFICATE_IDENTIFIER;

DECLARE_ASN1_ITEM(OSSL_ATTRIBUTE_CERTIFICATE_IDENTIFIER)

typedef struct OSSL_CERTIFICATE_IDENTIFIER_st {
    OSSL_ATTRIBUTE_CERTIFICATE_IDENTIFIER *attributeCertIdentifier;
    OSSL_ISSUER_SERIAL *genericCertIdentifier;
} OSSL_CERTIFICATE_IDENTIFIER;

DECLARE_ASN1_ITEM(OSSL_CERTIFICATE_IDENTIFIER)

typedef struct OSSL_COMPONENT_IDENTIFIER_st {
    OSSL_COMPONENT_CLASS *componentClass;
    ASN1_UTF8STRING *componentManufacturer;
    ASN1_UTF8STRING *componentModel;
    ASN1_UTF8STRING *componentSerial;
    ASN1_UTF8STRING *componentRevision;
    ASN1_OBJECT *componentManufacturerId;
    ASN1_BOOLEAN fieldReplaceable;
    STACK_OF(OSSL_COMPONENT_ADDRESS) *componentAddresses;
    OSSL_CERTIFICATE_IDENTIFIER *componentPlatformCert;
    OSSL_URI_REFERENCE *componentPlatformCertUri;
    ASN1_ENUMERATED *status;
} OSSL_COMPONENT_IDENTIFIER;

typedef struct OSSL_PLATFORM_CONFIG_st {
    STACK_OF(OSSL_COMPONENT_IDENTIFIER) *componentIdentifiers;
    OSSL_URI_REFERENCE *componentIdentifiersUri;
    STACK_OF(OSSL_PLATFORM_PROPERTY) *platformProperties;
    OSSL_URI_REFERENCE *platformPropertiesUri;
} OSSL_PLATFORM_CONFIG;

DECLARE_ASN1_FUNCTIONS(OSSL_PLATFORM_CONFIG)

# define OSSL_MEASUREMENT_ROOT_TYPE_STATIC        0
# define OSSL_MEASUREMENT_ROOT_TYPE_DYNAMIC       1
# define OSSL_MEASUREMENT_ROOT_TYPE_NONHOST       2
# define OSSL_MEASUREMENT_ROOT_TYPE_HYBRID        3
# define OSSL_MEASUREMENT_ROOT_TYPE_PHYSICAL      4
# define OSSL_MEASUREMENT_ROOT_TYPE_VIRTUAL       5
# define OSSL_EVALUATION_ASSURANCE_LEVEL_1        1
# define OSSL_EVALUATION_ASSURANCE_LEVEL_2        2
# define OSSL_EVALUATION_ASSURANCE_LEVEL_3        3
# define OSSL_EVALUATION_ASSURANCE_LEVEL_4        4
# define OSSL_EVALUATION_ASSURANCE_LEVEL_5        5
# define OSSL_EVALUATION_ASSURANCE_LEVEL_6        6
# define OSSL_EVALUATION_ASSURANCE_LEVEL_7        7
# define OSSL_EVALUATION_STATUS_DESIGNED_TO_MEET  0
# define OSSL_EVALUATION_STATUS_EVAL_IN_PROGRESS  1
# define OSSL_EVALUATION_STATUS_EVAL_COMPLETED    2
# define OSSL_STRENGTH_OF_FUNCTION_BASIC          0
# define OSSL_STRENGTH_OF_FUNCTION_MEDIUM         1
# define OSSL_STRENGTH_OF_FUNCTION_HIGH           2
# define OSSL_SECURITY_LEVEL_1                    1
# define OSSL_SECURITY_LEVEL_2                    2
# define OSSL_SECURITY_LEVEL_3                    3
# define OSSL_SECURITY_LEVEL_4                    4
# define OSSL_ATTRIBUTE_STATUS_ADDED              0
# define OSSL_ATTRIBUTE_STATUS_MODIFIED           1
# define OSSL_ATTRIBUTE_STATUS_REMOVED            2

DECLARE_ASN1_FUNCTIONS(OSSL_URI_REFERENCE)
{-
    generate_stack_macros("OSSL_URI_REFERENCE");
-}

DECLARE_ASN1_FUNCTIONS(OSSL_COMPONENT_ADDRESS)
{-
    generate_stack_macros("OSSL_COMPONENT_ADDRESS");
-}

DECLARE_ASN1_FUNCTIONS(OSSL_PLATFORM_PROPERTY)
{-
    generate_stack_macros("OSSL_PLATFORM_PROPERTY");
-}

DECLARE_ASN1_FUNCTIONS(OSSL_COMPONENT_IDENTIFIER)
{-
    generate_stack_macros("OSSL_COMPONENT_IDENTIFIER");
-}

typedef struct OSSL_PCV2_TRAIT_st {
    ASN1_OBJECT *traitId;
    ASN1_OBJECT *traitCategory;
    ASN1_OBJECT *traitRegistry;
    ASN1_UTF8STRING *description;
    ASN1_IA5STRING *descriptionURI;
    ASN1_OCTET_STRING *traitValue;
} OSSL_PCV2_TRAIT;

DECLARE_ASN1_FUNCTIONS(OSSL_PCV2_TRAIT)
{-
    generate_stack_macros("OSSL_PCV2_TRAIT");
-}

typedef struct OSSL_HASHED_CERTIFICATE_IDENTIFIER_st {
    X509_ALGOR *hashValue;
    ASN1_OCTET_STRING *hashOverSignatureValue;
} OSSL_HASHED_CERTIFICATE_IDENTIFIER;

DECLARE_ASN1_FUNCTIONS(OSSL_HASHED_CERTIFICATE_IDENTIFIER)

typedef struct OSSL_COMMON_CRITERIA_EVALUATION_st {
    OSSL_COMMON_CRITERIA_MEASURES *cCMeasures;
    ASN1_UTF8STRING *cCCertificateNumber;
    ASN1_UTF8STRING *cCCertificateAuthority;
    ASN1_UTF8STRING *evaluationScheme;
    ASN1_GENERALIZEDTIME *cCCertificateIssuanceDate;
    ASN1_GENERALIZEDTIME *cCCertificateExpiryDate;
} OSSL_COMMON_CRITERIA_EVALUATION;

typedef struct OSSL_ISO9000_CERTIFICATION_st {
    ASN1_BOOLEAN iso9000Certified;
    ASN1_IA5STRING *iso9000Uri;
} OSSL_ISO9000_CERTIFICATION;

# define OSSL_PLATFORM_FW_CAP_FW_SETUP_AUTH_LOCAL         0
# define OSSL_PLATFORM_FW_CAP_FW_SETUP_AUTH_REMOTE        1
# define OSSL_PLATFORM_FW_CAP_SMM_PROTECTION              2
# define OSSL_PLATFORM_FW_CAP_FW_KERNAL_DMA_PROTECTION    3

# define OSSL_PLATFORM_FW_SIG_VERIF_HARDWARE_SRTM         0
# define OSSL_PLATFORM_FW_SIG_VERIF_SECURE_BOOT           1

# define OSSL_PLATFORM_FW_UPDATE_COMPLIANCE_SP800_147     0
# define OSSL_PLATFORM_FW_UPDATE_COMPLIANCE_SP800_147B    1
# define OSSL_PLATFORM_FW_UPDATE_COMPLIANCE_SP800_193     2

# define OSSL_PLATFORM_HW_CAP_IOMMU_SUPPORT               0
# define OSSL_PLATFORM_HW_CAP_TRUSTED_EXEC_ENV            1
# define OSSL_PLATFORM_HW_CAP_PHYSICAL_TAMPER_PROT        2
# define OSSL_PLATFORM_HW_CAP_PHYSICAL_TAMPER_DET         3
# define OSSL_PLATFORM_HW_CAP_FIRMWARE_FLASH_WP           4
# define OSSL_PLATFORM_HW_CAP_EXTERNAL_DMA_SUPPORT        5

# define OSSL_RTM_TYPE_STATIC                             0
# define OSSL_RTM_TYPE_DYNAMIC                            1
# define OSSL_RTM_TYPE_NON_HOST                           2
# define OSSL_RTM_TYPE_VIRTUAL                            3
# define OSSL_RTM_TYPE_HARDWARE_STATIC                    4
# define OSSL_RTM_TYPE_BMC                                5

typedef STACK_OF(OSSL_PCV2_TRAIT) OSSL_COMPONENT_IDENTIFIER_V2;
typedef STACK_OF(OSSL_COMPONENT_IDENTIFIER_V2) OSSL_PLATFORM_COMPONENTS;

DECLARE_ASN1_FUNCTIONS(OSSL_PLATFORM_COMPONENTS)
DECLARE_ASN1_FUNCTIONS(OSSL_COMPONENT_IDENTIFIER_V2)

typedef struct OSSL_PLATFORM_CONFIG_V3_st {
    OSSL_PLATFORM_COMPONENTS *platformComponents;
    STACK_OF(OSSL_PLATFORM_PROPERTY) *platformProperties;
} OSSL_PLATFORM_CONFIG_V3;

DECLARE_ASN1_FUNCTIONS(OSSL_PLATFORM_CONFIG_V3)

typedef struct OSSL_PCV2_CERTIFICATE_IDENTIFIER_st {
    OSSL_HASHED_CERTIFICATE_IDENTIFIER *hashedCertIdentifier;
    OSSL_ISSUER_SERIAL *genericCertIdentifier;
} OSSL_PCV2_CERTIFICATE_IDENTIFIER;

DECLARE_ASN1_FUNCTIONS(OSSL_PCV2_CERTIFICATE_IDENTIFIER)
DECLARE_ASN1_FUNCTIONS(OSSL_COMMON_CRITERIA_EVALUATION)
DECLARE_ASN1_FUNCTIONS(OSSL_ISO9000_CERTIFICATION)

# define OSSL_PLATFORM_FW_CAP_FW_SETUP_AUTH_LOCAL         0
# define OSSL_PLATFORM_FW_CAP_FW_SETUP_AUTH_REMOTE        1
# define OSSL_PLATFORM_FW_CAP_SMM_PROTECTION              2
# define OSSL_PLATFORM_FW_CAP_FW_KERNAL_DMA_PROTECTION    3

# define OSSL_PLATFORM_FW_SIG_VERIF_HARDWARE_SRTM         0
# define OSSL_PLATFORM_FW_SIG_VERIF_SECURE_BOOT           1

# define OSSL_PLATFORM_FW_UPDATE_COMPLIANCE_SP800_147     0
# define OSSL_PLATFORM_FW_UPDATE_COMPLIANCE_SP800_147B    1
# define OSSL_PLATFORM_FW_UPDATE_COMPLIANCE_SP800_193     2

# define OSSL_PLATFORM_HW_CAP_IOMMU_SUPPORT               0
# define OSSL_PLATFORM_HW_CAP_TRUSTED_EXEC_ENV            1
# define OSSL_PLATFORM_HW_CAP_PHYSICAL_TAMPER_PROT        2
# define OSSL_PLATFORM_HW_CAP_PHYSICAL_TAMPER_DET         3
# define OSSL_PLATFORM_HW_CAP_FIRMWARE_FLASH_WP           4
# define OSSL_PLATFORM_HW_CAP_EXTERNAL_DMA_SUPPORT        5

# define OSSL_RTM_TYPE_STATIC                             0
# define OSSL_RTM_TYPE_DYNAMIC                            1
# define OSSL_RTM_TYPE_NON_HOST                           2
# define OSSL_RTM_TYPE_VIRTUAL                            3
# define OSSL_RTM_TYPE_HARDWARE_STATIC                    4
# define OSSL_RTM_TYPE_BMC                                5

# ifdef  __cplusplus
}
# endif
#endif
