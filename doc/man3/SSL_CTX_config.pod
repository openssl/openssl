=pod

=head1 NAME

SSL_CTX_config, SSL_config - configure SSL_CTX or SSL structure

=head1 SYNOPSIS

 #include <openssl/ssl.h>

 int SSL_CTX_config(SSL_CTX *ctx, const char *name);
 int SSL_config(SSL *s, const char *name);

=head1 DESCRIPTION

The functions SSL_CTX_config() and SSL_config() configure an B<SSL_CTX> or
B<SSL> structure using the configuration B<name>.

By calling SSL_CTX_config() or SSL_config() an application can perform many
complex tasks based on the contents of the configuration file: greatly
simplifying application configuration code.
Some future-proofing can be attained this way: the specified configuration
section can specify settings supported by the run-time version of OpenSSL that
were not known at the time the application code was written.

A configuration file must have been previously loaded, for example using
CONF_modules_load_file(). See L<config(5)> for details of the configuration
file syntax.
In most applications the default B<openssl.cnf> file is loaded automatically as
part of library initialisation.

=head1 RETURN VALUES

SSL_CTX_config() and SSL_config() return 1 for success or 0 if an error
occurred.

=head1 EXAMPLES

If the file "/etc/myapp/openssl.cnf" contains the following:

 myapp_init = myapp_init_section

 [myap_init_section]
 # list of configuration modules
 ssl_conf = myapp_ssl_section

 [myapp_ssl_section]
 myapp_server = myapp_server_section
 myapp_client = myapp_client_section

 [myapp_server_section]
 RSA.Certificate = /etc/myapp/server-rsa.pem
 ECDSA.Certificate = /etc/myapp/server-ecdsa.pem
 # Defaults are typically the wisest choice, override only with good cause.
 # These are more typically set in the "system_default" section.
 MinProtocol = ...
 Ciphers = ...
 Groups = ...
 SignatureAlgorithms = ...

 [myapp_client_section]
 # Defaults are typically the wisest choice, override only with good cause.
 # These are more typically set in the "system_default" section.
 MinProtocol = ...
 Ciphers = ...
 Groups = ...
 SignatureAlgorithms = ...

A server application could call:

 /*
  * This augments the default configuration file loaded as part of library
  * initialisation, whose "system_default" section is used to initialise the
  * SSL_CTX as part of SSL_CTX_new_ex(3).
  */
 if (CONF_modules_load_file("/etc/myapp/config.cnf", "myapp_init", 0) <= 0) {
     fprintf(stderr, "Error processing config file\n");
     goto err;
 }

 ctx = SSL_CTX_new(TLS_server_method());

 /*
  * This can add to or override the "system_default" settings.
  * The name in the second parameter can also appear in the
  * system-wide configuration file alongside "system_default",
  * in which case, no CONF_modules_load_file() call is needed.
  *
  *    openssl_conf = openssl_init
  *    ...
  *    [openssl_init]
  *    ssl_conf = ssl_module
  *    ...
  *    [ssl_module]
  *    system_default = ssl_default_section
  *    myapp_server = myapp_server_section
  *    ...
  *    [ssl_default_section]
  *    ...
  *    [myapp_server_section]
  *    ...
  */
 if (SSL_CTX_config(ctx, "myapp_server") == 0) {
     fprintf(stderr, "Error configuring server.\n");
     goto err;
 }

In this example two certificates and the cipher list are configured without
the need for any additional application code.

=head1 SEE ALSO

L<ssl(7)>,
L<config(5)>,
L<SSL_CONF_cmd(3)>,
L<SSL_CTX_new_ex(3)>,
L<CONF_modules_load_file(3)>
L<OPENSSL_INIT_new(3)>,
L<OPENSSL_INIT_set_config_file_flags(3)>,
L<OPENSSL_INIT_set_config_filename(3)>,
L<OPENSSL_INIT_set_config_appname(3)>,
L<OPENSSL_init_ssl(3)>

=head1 HISTORY

The SSL_CTX_config() and SSL_config() functions were added in OpenSSL 1.1.0.

=head1 COPYRIGHT

Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
